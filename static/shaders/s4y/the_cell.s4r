# Heyyo. I'm Sidney (aka s4y).



# preamble = """
# precision highp float;
# varying vec2 v_tex_coord;
# uniform vec2 u_sprite_size;
# uniform float u_scale;
# uniform sampler2D u_texture;
# uniform float u_time;
# uniform float u_sound_level;
# uniform vec2 u_offset;
# 
# float aspect = u_sprite_size.x / u_sprite_size.y;
# vec2 pxsize = u_sprite_size * u_scale;
# vec2 pxp = floor(vec2(gl_FragCoord.x, pxsize.y - gl_FragCoord.y));
# vec2 pxstep = v_tex_coord / pxsize;
# 
# """
# 
# shader = scene.Shader(preamble + """
# 
# vec4 neighbor(int x, int y) {
# 	vec2 tp = pxp + vec2(x, y);
# 	tp += 0.5;
# 	tp /= pxsize;
# 	tp.y = 1.0 - tp.y;
# 	tp.x = mod(tp.x, 1.0);
# 	if (
# 		/* tp.x > 1.0 || tp.x < 0.0 || */
# 		tp.y > 1.0 || tp.y < 0.0)
# 		return vec4(0.0);
# 	return texture2D(u_texture, tp);
# }
# 
# vec4 grow() {
# 	vec4 oncolor = vec4(1.0, 0.0, 0.0, 1.0);
# 	vec4 offcolor = vec4(0.0, 0.0, 0.0, 1.0);
# 	 float rule = floor(u_offset.y / 10.0) * 2.0;
# 	
# 	if (pxp.y < 1.0) {
# 		// float rule = floor(pow(u_time, 2.0)) * 2.0;
# 		//float rule = u_offset.y/10.0;//floor(u_time) * 2.0;
# 		vec4 rc = vec4(0.0, rule / 255.0, 0.0, 0.0);
# 		//if (floor(pxp.x) == floor(mod(u_time * 10.0, 195.0))) {
# 		if (mod(floor(pxp.x), floor(u_offset.x / 5.0)) == 1.0) {
# 			return oncolor + rc;
# 		} else {
# 			return offcolor + rc;
# 		}
# 	}
# 	vec4 l = neighbor(-1, -1);
# 	vec4 c = neighbor(0, -1);
# 	vec4 r = neighbor(1, -1);
# 	vec4 rc = vec4(0.0, c[1], 0.0, 0.0);
# 	//float rule = c[1] * 255.0;
# 	float num = floor(l.r * 4.0 + c.r * 2.0 + r.r);
# 	bool res = mod(rule / pow(2.0, num), 2.0) >= 1.0;
# 	return (res ? oncolor : offcolor) + rc;
# }
# 
# void main() {
# 	// gl_FragColor = vec4(1.0) * u_sound_level;
# 	// return;
# 	gl_FragColor = grow();
# }
# """)
# 
# draw_shader = scene.Shader(preamble + """
# //uniform vec2 u_offset;
# uniform vec2 u_draw_size;
# 
# void main() {
# 	vec2 midp = v_tex_coord - 0.5;
# 	midp.x *= aspect;
# 	float dist = distance(midp, vec2(0.0));
# 	vec2 ptexcoord = vec2(atan(midp.y, midp.x), pow(dist, 1.0));
# 	// ptexcoord.y *= dist;
# 	//ptexcoord.y += 0.75;
# 	// ptexcoord.x += 2.5;
# 	ptexcoord.x /= atan(1.0) * 8.0;
# 	ptexcoord.x += 0.5;
# 	ptexcoord = max(ptexcoord, vec2(0.0));
# 	// ptexcoord.y = pow(ptexcoord.y, 1.0 + u_offset.y / 10.0);
# 	// ptexcoord.y *= 1.0 + u_offset.y / pxsize.y;
# 	ptexcoord.y *= ptexcoord.y;
# 	// ptexcoord += u_offset / pxsize;
# 	ptexcoord.y = 1.0 - ptexcoord.y;
# 	if (ptexcoord.y < 0.0) discard;
# 	// ptexcoord.y = pow(2.0, 1.0 - dist) / 2.0;
# 	// ptexcoord.y *= 0.5 + u_sound_level * 0.5;
# 	//ptexcoord.y *= 0.1;
# 	// ptexcoord.y -= 0.01;
# 	ptexcoord.x = mod(ptexcoord.x, 1.0);
# 	vec2 texcoord = (
# 		gl_FragCoord.xy + u_offset * u_scale) / pxsize * vec2(aspect, 1.0) / 2.0 + 0.5;
# 	gl_FragColor = vec4(1.0) * texture2D(
# 			u_texture, ptexcoord)[0];
# 	gl_FragColor += pow(dist + 0.5, 2.0);
# }
# """)

:fn floor 1

:def neighbor { =y =x p .xy bal uv dims * floor x y vec2 + dims / unbal }

p .y 0 step
dup =st
1 vec4.1 *

{
0 0.01 0 vec3 p swap - =p
fb'f uv tex 0.9 *
# st inv *
+
}

drawto'f

fb'f uv tex draw
