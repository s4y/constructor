fb'filt uv tex
drawto'f'480x360
640 480 1 vec3 1 /  =mul

:def sceneDistance { =p p
  0 0 0.5 vec3 + =p p
  1 4 3 / 1 vec3 * 
  0 0 0.1 vec3 + =p p
  # 0.1 t 0.05 * sin * rotY =p p
  # t 0.5 * rotZ *
  # transform =p p
  0 0 p .xy 0 0 vec2 distance 0.1 * cos 0.8 - vec3 + =p p
  1 1 0.01 vec3
  sdBox 2 / p vec4.2
  }

p =op
fitp

PI 1.5 / 1 0.1 10 perspectiveProj
inverse =invProj
# inv_camera_mat proj_mat swap * =invProj
p invProj transform =direction

:def project direction * p +

-10
:loop 40
  dup project sceneDistance .x +
=dist

dist project =hitP
hitP sceneDistance .yxz =boxP
hitP sceneDistance .x =surfDist

:def sd sceneDistance .x
hitP estimateNormal =norm

{ boxP .xzy =p

{
p unbal mul * dup =px floor mul / bal =p
fb'f uv tex
0 0 0 0.5 vec4 +
inv 2 vec4.1 pow inv
px .x 3 * 0 + 3 mod 1 step
px .x 3 * 1 + 3 mod 1 step
px .x 3 * 2 + 3 mod 1 step
1 vec4 *

px 3 1 1 vec3 * 1 mod 0.5 - abs dup .x swap .y max
{ px 3 1 1 vec3 * 1 mod 0.5 - abs =p cdist }
*
0.5 0.4 ss
*

# 0 1 0.0 vec3 norm dot 100 pow 0 1 clamp 1 vec4.1 swap mix

{ op .xzy -0.8 -1.2 0 vec3 + norm reflect =p fitp cdist 1.89 1.9 ss vec4.1 } 0.1 * +

}
dist 100 9 ss *
surfDist 0.01 0 ss *
vec4.1


draw
bail


{
fitp
p .x 4 3 / / abs 1 0.98 ss *
p .y abs 1 0.98 ss *
}

}
# drawto'ff'3840x2160
# fb'ff uv tex
draw
