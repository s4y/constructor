:def sd {
  0.6 /
  0 0 3 vec3 +
  t 0.2 * rotY t 0.6 * rotX * transform
  dup =op
  0.6 1 1 vec3 * 
  =p
  p .x op .xz 0 0 vec2 distance dup =cd PI * 3.5 / cos unbal 8 pow 1.9 * p .y - p .z vec3
  =np
  # np np length sin unbal sf 0.3 * - =np
  np 1 sdSphere
  p 1 sdSphere max 4 /
  # p .x p .y * 100 * sin unbal 0.005 * +
  }

{
fitp

0 0 -1 vec3 =direction
:def marchOnce direction * p + sd

0
:loop 50
 dup marchOnce 0 max +
=dist

dist direction * p +
=hitP

hitP estimateNormal
=norm

dist marchOnce
=surfDist

:def bg { =p
 0.6 p .y 0.5 * 0.5 + 1 hsv
 }

fb'last norm 1 * .xy unbal tex
surfDist 1 64 / step *

draw
bail

drawto'f

}

{
p 0.9 * =p
fb'f uv tex
}
fb'f uv tex +
draw
